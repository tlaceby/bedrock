import math from "std.math";

fn add (x: number, y: number) -> number {
    return x + y;
}

trait Countable {
    count: fn () -> number;
}


struct Circle {
    radius: number;

    fn count () -> number {
        return self.radius;
    }
}

struct Person {
    age: number;
    name: string;
    friends: []Person;

    fn new (name: string, age: number) -> Person {
        return Person{
            name, 
            age,
        };
    }

    fn greet () {
        println("My name is {} and my age is {}", self.name, self.age);
    }

    fn count () -> number {
        return self.age;
    }
}

fn main () {
    let countables: []Countable = [];
    
    countables.push(Person::new("Tyler", 24));
    countables.push(Circle{
        radius: math.pi,
    });

    println("Count: ", c.count(1, 2));

    // Output:
    // Count: 24
    // Count: 10
}

let numbers: []number = [1, 2, 3, 4, 5];

foreach number in numbers {
    println ("Number: {}", number);
}

if numbers.length() > 2 {
    process.exit(1);
}
// main.br

fn combine <T> (a: T, b: T) -> T {
  return a + b;
}

struct Combinable<T> {
  data: T;

  fn setData(data: T) -> Self {
    self.data = data;
    return self;
  }

  fn combine(other: T) -> Self {
    self.data = self.data + other;
    return self;
  }

  static fn new(init: T) -> Self {
    return Self{
      data: init,
    };    
  }
}

const c1 = Combinable <number>::new(10);
c1.data = 1;

let c2: Combinable<number>;
c2 = Combinable<number>{
  data: 1.2,
};

c2.data = c1.data;

const c3 = Combinable<string> {
  data: "Hello",
};

c3.setData("Hello ");
c3.combine("world");

const c4 = Combinable<number>::new(c2.data).setData(10).combine(3);
